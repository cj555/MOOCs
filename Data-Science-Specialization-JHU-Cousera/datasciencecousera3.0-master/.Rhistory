DNA1<-cbind(force_extension(0.34,1000,50), id="DNA1")
L0 <-  LPB*N
LPB <- 0.34
N <- 1000
P <- 50
L0 <-  LPB*N
x <- seq(7/16*L0, 0.97*L0, length.out = 100)
force <- (0.25/(1- x/L0)^2-0.25 + x/L0)* 4.114/P
dat <- data.frame(extension_nm=x, force_pN=force)
dat[,force_pN<50]
dat[,force_pN<51]
dat <- data.frame(extension_nm=x, force_pN=force)
dat[which(force_pN<51),]
dat[which(dat$force_pN<60),]
force_extension <- function (LPB, N, P){
LPB <- 0.34
N <- 1000
P <- 50
L0 <-  LPB*N
x <- seq(7/16*L0, 0.97*L0, length.out = 100)
force <- (0.25/(1- x/L0)^2-0.25 + x/L0)* 4.114/P
dat <- data.frame(extension_nm=x, force_pN=force)
dat[which(dat$force_pN<60),]
}
DNA1<-cbind(force_extension(0.34,1000,50), id="DNA1")
DNA2 <- cbind(force_extension(0.6,1000,1), id="DNA2")
DNA <- rbind(DNA1, DNA2)
DNA$id <- as.factor(DNA$id)
head(DNA)
tail(DNA)
h1 <- rPlot(
x = "extension_nm",
y = "force_pN",
group= "id",
data = DNA)
h1
p1 <- nPlot(extension_nm ~ force_pN, group = 'id', data = DNA, type = 'scatterChart')
p1
force_extension <- function (LPB, N, P){
#     LPB <- 0.34
#     N <- 1000
#     P <- 50
#
L0 <-  LPB*N
x <- seq(7/16*L0, 0.97*L0, length.out = 100)
force <- (0.25/(1- x/L0)^2-0.25 + x/L0)* 4.114/P
dat <- data.frame(extension_nm=x, force_pN=force)
dat[which(dat$force_pN<60),]
}
shiny::runApp('D:/GitHub/worm-like-chaine')
DNA1<-cbind(force_extension(0.34,1000,50), id="DNA1")
DNA2 <- cbind(force_extension(0.6,1000,1), id="DNA2")
DNA <- rbind(DNA1, DNA2)
DNA$id <- as.factor(DNA$id)
head(DNA)
tail(DNA)
p1 <- nPlot(extension_nm ~ force_pN, group = 'id', data = DNA, type = 'scatterChart')
p1$xAxis(axisLabel = 'Weight (in lb)')
p1
p1 <- nPlot(extension_nm ~ force_pN, group = 'id', data = DNA, type = 'scatterChart')
p1$xAxis(axisLabel = 'Force (in pN)')
p1$yAxis(axisLabel = 'Extension (in nm)')
p1
p1 <- nPlot(extension_nm ~ force_pN, group = 'id', data = DNA, type = 'lineChart')
h1 <- hPlot(
x = "extension_nm",
y = "force_pN",
group= "id",
data = DNA)
h1
h1 <- hPlot(
x = "force_pN",
y = "extension_nm",
group= "id",
data = DNA)
h1
force_extension <- function (LPB, N, P,fmax,fmin){
#     LPB <- 0.34
#     N <- 1000
#     P <- 50
#     L0 <-  LPB*N
x <- seq(7/16*L0, 0.97*L0, length.out = 100)
force <- (0.25/(1- x/L0)^2-0.25 + x/L0)* 4.114/P
dat <- data.frame(extension_nm=x, force_pN=force)
dat[which(dat$force_pN<fmax & dat$force_pN>fin ),]
}
DNA1<-cbind(force_extension(0.34,1000,50, 10,20), id="DNA1")
function (x, i, j, drop = if (missing(i)) TRUE else length(cols) ==
DNA1<-cbind(force_extension(0.34,1000,50, 10,20), id="DNA1")
DNA2 <- cbind(force_extension(0.6,1000,1,10, 20), id="DNA2")
DNA <- rbind(DNA1, DNA2)
DNA$id <- as.factor(DNA$id)
h1 <- hPlot(
x = "force_pN",
y = "extension_nm",
group= "id",
data = DNA)
h1
DNA1<-cbind(force_extension(0.34,1000,50,10,20), id="DNA1")
force_extension <- function (LPB, N, P,fmin,fmax){
#     LPB <- 0.34
#     N <- 1000
#     P <- 50
#     L0 <-  LPB*N
x <- seq(7/16*L0, 0.97*L0, length.out = 100)
force <- (0.25/(1- x/L0)^2-0.25 + x/L0)* 4.114/P
dat <- data.frame(extension_nm=x, force_pN=force)
dat[which(dat$force_pN<fmax & dat$force_pN>fin ),]
}
DNA1<-cbind(force_extension(0.34,1000,50,10,20), id="DNA1")
force_extension <- function (LPB, N, P,fmin,fmax){
#     LPB <- 0.34
#     N <- 1000
#     P <- 50
#     L0 <-  LPB*N
x <- seq(7/16*L0, 0.97*L0, length.out = 100)
force <- (0.25/(1- x/L0)^2-0.25 + x/L0)* 4.114/P
dat <- data.frame(extension_nm=x, force_pN=force)
dat[which(dat$force_pN<fmax && dat$force_pN>fmin),]
}
DNA1<-cbind(force_extension(0.34,1000,50,10,20), id="DNA1")
force_extension <- function (LPB=0.34, N=2000, P=50,fmin=0,fmax=20){
#     LPB <- 0.34
#     N <- 1000
#     P <- 50
#     L0 <-  LPB*N
x <- seq(7/16*L0, 0.97*L0, length.out = 100)
force <- (0.25/(1- x/L0)^2-0.25 + x/L0)* 4.114/P
dat <- data.frame(extension_nm=x, force_pN=force)
dat[which(dat$force_pN<fmax && dat$force_pN>fmin),]
}
DNA1<-cbind(force_extension(0.34,1000,50,fmin=10,fmax=20), id="DNA1")
force_extension <- function (LPB=0.34, N=2000, P=50,fmin=0,fmax=20){
#     LPB <- 0.34
#     N <- 1000
#     P <- 50
#     L0 <-  LPB*N
x <- seq(7/16*L0, 0.97*L0, length.out = 100)
force <- (0.25/(1- x/L0)^2-0.25 + x/L0)* 4.114/P
dat <- data.frame(extension_nm=x, force_pN=force)
dat[which(dat$force_pN<fmax & dat$force_pN>fmin),]
}
force_extension(0.34,1000,50,fmin=10,fmax=20)
DNA1<-cbind(force_extension(0.34,1000,50,fmin=10,fmax=20), id="DNA1")
DNA2 <- cbind(force_extension(0.6,1000,1,fmin=10,fmax=20), id="DNA2")
DNA <- rbind(DNA1, DNA2)
DNA$id <- as.factor(DNA$id)
h1 <- hPlot(
x = "force_pN",
y = "extension_nm",
group= "id",
data = DNA)
h1
DNA1<-cbind(force_extension(0.34,1000,50,fmin,fmax), id="DNA1")
force_extension(0.34,1000,50,fmin=10,fmax=20)
force_extension(0.34,1000,50,fmin=10,fmax=20)
DNA1<-cbind(force_extension(0.34,1000,50,fmin,fmax), id="DNA1")
DNA1<- cbind(force_extension(0.34,1000,50,fmin,fmax), id="DNA1")
DNA1<- cbind(force_extension(0.34,1000,50,fmin,fmax), id="DNA1")
fmin <- 0
fmax <- 20
force_extension <- function (LPB=0.34, N=2000, P=50,fmin=0,fmax=20){
#     LPB <- 0.34
#     N <- 1000
#     P <- 50
#     L0 <-  LPB*N
x <- seq(7/16*L0, 0.97*L0, length.out = 100)
force <- (0.25/(1- x/L0)^2-0.25 + x/L0)* 4.114/P
dat <- data.frame(extension_nm=x, force_pN=force)
dat[which(dat$force_pN<fmax & dat$force_pN>fmin),]
}
fmin <- 0
fmax <- 20
force_extension <- function (LPB=0.34, N=2000, P=50,fmin=0,fmax=20){
#     LPB <- 0.34
#     N <- 1000
#     P <- 50
#     L0 <-  LPB*N
x <- seq(7/16*L0, 0.97*L0, length.out = 100)
force <- (0.25/(1- x/L0)^2-0.25 + x/L0)* 4.114/P
dat <- data.frame(extension_nm=x, force_pN=force)
dat[which(dat$force_pN<fmax & dat$force_pN>fmin),]
}
DNA1<- cbind(force_extension(0.34,1000,50,fmin,fmax), id="DNA1")
DNA2 <- cbind(force_extension(0.6,1000,1,fmin,fmax), id="DNA2")
DNA <- rbind(DNA1, DNA2)
DNA$id <- as.factor(DNA$id)
h1 <- hPlot(
x = "force_pN",
y = "extension_nm",
group= "id",
data = DNA)
h1
fmin <- 0
fmax <- 20
force_extension <- function (LPB=0.34, N=2000, P=50,fmin=0,fmax=20){
#     LPB <- 0.34
#     N <- 1000
#     P <- 50
#     L0 <-  LPB*N
x <- seq(0, 0.97*L0, length.out = 100)
force <- (0.25/(1- x/L0)^2-0.25 + x/L0)* 4.114/P
dat <- data.frame(extension_nm=x, force_pN=force)
dat[which(dat$force_pN<fmax & dat$force_pN>fmin),]
}
DNA1<- cbind(force_extension(0.34,1000,50,fmin,fmax), id="DNA1")
DNA2 <- cbind(force_extension(0.6,1000,1,fmin,fmax), id="DNA2")
DNA <- rbind(DNA1, DNA2)
DNA$id <- as.factor(DNA$id)
h1 <- hPlot(
x = "force_pN",
y = "extension_nm",
group= "id",
data = DNA)
h1
force_extension <- function (LPB=0.34, N=2000, P=50,fmin=0,fmax=20){
#     LPB <- 0.34
#     N <- 1000
#     P <- 50
#     L0 <-  LPB*N
x <- seq(0.2*L0, 0.97*L0, length.out = 100)
force <- (0.25/(1- x/L0)^2-0.25 + x/L0)* 4.114/P
dat <- data.frame(extension_nm=x, force_pN=force)
dat[which(dat$force_pN<fmax & dat$force_pN>fmin),]
}
DNA1<- cbind(force_extension(0.34,1000,50,fmin,fmax), id="DNA1")
DNA2 <- cbind(force_extension(0.6,1000,1,fmin,fmax), id="DNA2")
DNA <- rbind(DNA1, DNA2)
DNA$id <- as.factor(DNA$id
h1 <- hPlot(
x = "force_pN",
y = "extension_nm",
group= "id",
data = DNA)
h1
force_extension <- function (LPB=0.34, N=2000, P=50,fmin=0,fmax=20){
#     LPB <- 0.34
#     N <- 1000
#     P <- 50
L0 <-  LPB*N
x <- seq(0.2*L0, 0.97*L0, length.out = 100)
force <- (0.25/(1- x/L0)^2-0.25 + x/L0)* 4.114/P
dat <- data.frame(extension_nm=x, force_pN=force)
dat[which(dat$force_pN<fmax & dat$force_pN>fmin),]
}
DNA1<- cbind(force_extension(0.34,1000,50,fmin,fmax), id="DNA1")
DNA2 <- cbind(force_extension(0.6,1000,1,fmin,fmax), id="DNA2")
DNA <- rbind(DNA1, DNA2)
DNA$id <- as.factor(DNA$id)
h1 <- hPlot(
x = "force_pN",
y = "extension_nm",
group= "id",
data = DNA)
h1
shiny::runApp('D:/GitHub/worm-like-chaine')
library(rCharts)
library(shiny)
runApp()
setwd("D:/GitHub/datasciencecoursera2.0/data_product/myShinyApp")
setwd("D:/GitHub/worm-like-chaine")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(shinyApp)
library(ShinyApp)
library(shinyapps)
deployApp()
shiny::runApp('D:/GitHub/worm-like-chain')
shiny::runApp('D:/GitHub/worm-like-chain')
setwd("D:/GitHub/worm-like-chain")
deployApp()
shiny::runApp()
deployApp()
shiny::runApp()
shiny::runApp()
setwd("D:/GitHub/worm-like-chain")
library(shinyapp)
library(shinyapps)
deployApp()
shiny::runApp()
deployApp()
shiny::runApp()
deployApp()
shiny::runApp()
deployApp()
deployApp()
deployApp()
deployApp()
deployApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
deployApp()
shiny::runApp()
deployApp()
shiny::runApp()
deployApp()
shiny::runApp()
deployApp()
shiny::runApp('D:/GitHub/worm-like-chain-app')
deployApp()
library(shinyapps)
deployApp()
getwd()
setwd("D:/GitHub/worm-like-chain-app")
deployApp()
setwd("D:/GitHub/worm-like-chain-app")
deployApp()
library(shinyapps)
deployApp()
setwd("D:/GitHub/Random/tweezerData")
setwd("D:/PostDoc/PostDoc2013/tweezer/2015-02-12-ND4-FP-H672")
source('D:/GitHub/Random/tweezerData/tweezerStepFunc.R', echo=TRUE)
setwd("D:/PostDoc/PostDoc2013/tweezer/2015-02-12-ND4-FP-H672")
dat <- TweezerExtenLoad("./FB-ND4-UV8m-Vis1m-bead3-2.txt")
names(dat)
plot(dat$Time_sec, dat$Extension_nm)
plot(dat$Time_sec, dat$MagnetsZ_mm)
TweezerCycleCountByNA(dat)
source('D:/GitHub/Random/tweezerData/tweezerStepFunc.R', echo=TRUE)
source('D:/GitHub/Random/tweezerData/tweezerStepFunc.R', echo=TRUE)
TweezerCycleCountByNA(dat)
dat$cyc<-TweezerCycleCountByNA(dat)
plot(dat$cyc)
plot(dat$Extension_nm)
source('D:/GitHub/Random/tweezerData/tweezerStepFunc.R', echo=TRUE)
dat$cyc<-TweezerCycleCountByTime(dat, 5)
plot(dat$cyc)
step <- TweezerStepping(dat)
dat <- TweezerExtenLoad("./FB-ND4-UV8m-Vis1m-bead3-2.txt")
names(dat)
dat$cycle<-TweezerCycleCountByTime(dat, 5)
step <- TweezerStepping(dat)
plot(step$cycle,step$mean)
plot(step$cycle,step$mean, style="l")
plot(step$cycle,step$mean, style="line")
plot(step$cycle,step$mean)
change <- TweezerSteppingDelta(step, -2)
change <- TweezerSteppingDelta(step, -2)
change <- TweezerSteppingDelta(step, -2)
names(change)
plot(dat$Time_sec, dat$MagnetsZ_mm)
plot(dat$Time_sec, dat$Extension_nm)
source('D:/GitHub/Random/tweezerData/tweezerStepFunc.R', echo=TRUE)
source('D:/GitHub/Random/tweezerData/tweezerStepFunc.R', echo=TRUE)
trace<-TweezerSteppingTrace(dat, step)
plot(trace)
trace<-TweezerSteppingTrace(dat, step)
source('D:/GitHub/Random/tweezerData/tweezerStepFunc.R', echo=TRUE)
trace<-TweezerSteppingTrace(dat, step)
plot(trace)
source('D:/GitHub/Random/tweezerData/tweezerStepFunc.R', echo=TRUE)
trace<-TweezerSteppingTrace(dat, step)
plot(trace)
step$cycle[[1]]
step$cycle[[2]]
step$cycle
source('~/.active-rstudio-document', echo=TRUE)
source('D:/GitHub/Random/tweezerData/tweezerStepFunc.R', echo=TRUE)
trace<-TweezerSteppingTrace(dat, step)
plot(trace)
plot(dat$Time_sec,trace)
step$count[[4]]
step$mean[[4]]
source('D:/GitHub/Random/tweezerData/tweezerStepFunc.R', echo=TRUE)
trace<-TweezerSteppingTrace(dat, step)
trace<-TweezerSteppingTrace(dat, step)
source('D:/GitHub/Random/tweezerData/tweezerStepFunc.R', echo=TRUE)
trace<-TweezerSteppingTrace(dat, step)
plot(dat$Time_sec,trace)
trace<-TweezerSteppingTrace(dat, step)
plot(dat$Time_sec,trace)
source('D:/GitHub/Random/tweezerData/tweezerStepFunc.R', echo=TRUE)
trace<-TweezerSteppingTrace(dat, step)
source('D:/GitHub/Random/tweezerData/tweezerStepFunc.R', echo=TRUE)
trace<-TweezerSteppingTrace(dat, step)
plot(dat$Time_sec,trace)
plot(dat$Time_sec, dat$Extension_nm)
plot(dat$Time_sec, dat$Extension_nm)
abline(dat$Time_sec,trace)
plot(dat$Time_sec, dat$Extension_nm)
abline(dat$Time_sec,trace,col="red")
abline(trace,col="red")
plot(dat$Time_sec, dat$Extension_nm)
plot(dat$Time_sec, dat$Extension_nm,col="yellow")
abline(trace,col="red")
abline(trace,col="red")
abline(trace,col="black")
line(trace,col="black")
line(dat$Time_sec,trace,col="black")
line(dat$Time_sec,trace)
plot(dat$Time_sec, dat$Extension_nm,col="yellow")
lines(dat$Time_sec,trace)
plot(dat$Time_sec,trace)
plot(dat$Time_sec,trace, style="line")
plot(dat$Time_sec,trace, "l")
plot(dat$Time_sec, dat$Extension_nm)
plot(dat$Time_sec, dat$Extension_nm)
lines(dat$Time_sec,trace,"red")
plot(dat$Time_sec, dat$Extension_nm)
lines(dat$Time_sec,trace,"red")
lines(dat$Time_sec,trace,col="red")
plot(dat$Time_sec, dat$Extension_nm, ylim=c(100,400))
lines(dat$Time_sec,trace,col="red")
text(dat$Time_sec, trace, 0, sep=", "), cex=0.8)
text(dat$Time_sec, trace, 0, cex=0.8)
plot(dat$Time_sec, dat$Extension_nm, ylim=c(100,400))
lines(dat$Time_sec,trace,col="red")
text(dat$Time_sec, trace, 0, cex=0.8)
text(dat$Time_sec+10, trace, 0, cex=0.8)
text(dat$Time_sec+100, trace, 0, cex=0.8)
plot(dat$Time_sec, dat$Extension_nm, ylim=c(100,400))
lines(dat$Time_sec,trace,col="red")
text(dat$Time_sec+100, trace, 0, cex=0.8)
for (i in 2: nrow(dat)){
if(dat$cycle[[i]]>dat$cycle[[i-1]]){
text(dat$Time_sec[[i-1]]-100, trace[[i-1]], 0, cex=0.8)
}
}
for (i in 2: nrow(dat)){
if(dat$cycle[[i]]>dat$cycle[[i-1]]){
text(dat$Time_sec[[i-1]]-100, trace[[i-1]], trace[[i]], cex=0.8)
}
}
plot(dat$Time_sec, dat$Extension_nm, ylim=c(100,400))
lines(dat$Time_sec,trace,col="red")
for (i in 2: nrow(dat)){
if(dat$cycle[[i]]>dat$cycle[[i-1]]){
text(dat$Time_sec[[i-1]]-100, trace[[i-1]], round(trace[[i]],1), cex=0.8)
}
}
for (i in 2: nrow(dat)){
if(dat$cycle[[i]]>dat$cycle[[i-1]]){
text(dat$Time_sec[[i]]-100, trace[[i]], round(trace[[i]],1), cex=0.8)
}
}
plot(dat$Time_sec, dat$Extension_nm, ylim=c(100,400))
lines(dat$Time_sec,trace,col="red")
for (i in 2: nrow(dat)){
if(dat$cycle[[i]]>dat$cycle[[i-1]]){
text(dat$Time_sec[[i]]-100, trace[[i]], round(trace[[i]],1), cex=0.8)
}
}
text(dat$Time_sec[[1]]-100, trace[[1]], round(trace[[1]],1), cex=0.8)
text(dat$Time_sec[[1]]-5, trace[[1]], round(trace[[1]],1), cex=0.8)
plot(dat$Time_sec, dat$Extension_nm, ylim=c(100,400))
lines(dat$Time_sec,trace,col="red")
text(dat$Time_sec[[1]], trace[[1]], round(trace[[1]],1), cex=0.8)
text(dat$Time_sec[[1]]-10, trace[[1]], round(trace[[1]],1), cex=0.8)
text(dat$Time_sec[[1]]-50, trace[[1]], round(trace[[1]],1), cex=0.8)
plot(dat$Time_sec, dat$Extension_nm, ylim=c(100,400))
lines(dat$Time_sec,trace,col="red")
for (i in 2: nrow(dat)){
if(dat$cycle[[i]]>dat$cycle[[i-1]]){
text(dat$Time_sec[[i]]-100, trace[[i]], round(trace[[i]],1), cex=0.8)
}
}
plot(dat$Time_sec, dat$Extension_nm, ylim=c(100,400),title="UV8mins-FP")
lines(dat$Time_sec,trace,col="red")
plot(dat$Time_sec, dat$Extension_nm, ylim=c(100,400),main="UV8mins-FP")
lines(dat$Time_sec,trace,col="red")
for (i in 2: nrow(dat)){
if(dat$cycle[[i]]>dat$cycle[[i-1]]){
text(dat$Time_sec[[i]]-100, trace[[i]], round(trace[[i]],1), cex=0.8)
}
}
dat <- TweezerExtenLoad("./FB-ND4-UV8m-Vis1m-bead3-1.txt")
dat$cycle<-TweezerCycleCountByTime(dat, 5)
step <- TweezerStepping(dat)
dat$trace<-TweezerSteppingTrace(dat, step)
names(dat)
plot(dat$Time_sec, dat$Extension_nm, ylim=c(100,400),main="UV8mins-FP")
lines(dat$Time_sec,trace,col="red")
for (i in 2: nrow(dat)){
if(dat$cycle[[i]]>dat$cycle[[i-1]]){
text(dat$Time_sec[[i]]-100, trace[[i]], round(trace[[i]],1), cex=0.8)
}
}
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
plot(dat$Time_sec, dat$Extension_nm, ylim=c(100,500),main="UV8mins-FP")
lines(dat$Time_sec,trace,col="red")
dat$trace<-TweezerSteppingTrace(dat, step)
plot(dat$Time_sec, dat$Extension_nm, ylim=c(100,500),main="UV8mins-FP")
lines(dat$Time_sec,trace,col="red")
plot(dat$Time_sec, dat$Extension_nm, ylim=c(100,500),main="UV8mins-FP")
lines(dat$Time_sec,dat$trace,col="red")
for (i in 2: nrow(dat)){
if(dat$cycle[[i]]>dat$cycle[[i-1]]){
text(dat$Time_sec[[i]]-100, trace[[i]], round(trace[[i]],1), cex=0.8)
}
}
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
setwd("D:/GitHub/datasciencecousera3.0")
